#include <Enlivengine/Math/Vector2.hpp>

#include <doctest/doctest.h>

DOCTEST_TEST_CASE("Vector2")
{
	en::Vector2i vi;
	vi.x = 2;
	vi.y = 3;
	en::Vector2f vf1(vi);
	en::Vector2f vf2(vf1);
	DOCTEST_CHECK(en::Math::Equals(vf1.x, vf2.x));
	DOCTEST_CHECK(en::Math::Equals(vf1.x, 2.f));
	DOCTEST_CHECK(en::Math::Equals(vf1.y, vf2.y));
	DOCTEST_CHECK(en::Math::Equals(vf1.y, 3.f));
	DOCTEST_CHECK(en::Vector2f::Equals(vf1, vf2));
	DOCTEST_CHECK(vf1 == vf2);
	en::Vector2f vf3(4.0f);
	DOCTEST_CHECK(en::Math::Equals(vf3.x, 4.f));
	DOCTEST_CHECK(en::Math::Equals(vf3.y, 4.f));
	DOCTEST_CHECK(en::Math::Equals(vf3[0], 4.f));
	DOCTEST_CHECK(en::Math::Equals(vf3(0), 4.f));
	DOCTEST_CHECK(vf3 == en::Vector2f(4.0f, 4.0f));
	DOCTEST_CHECK(en::Vector2f::Equals(vf3, en::Vector2f(4.0f, 4.0f)));
	DOCTEST_CHECK(vf1.Set(vf2) == vf2);
	DOCTEST_CHECK(vf1.Set(vi) == en::Vector2f(vi));
	DOCTEST_CHECK(vf1.Set(4.0f) == en::Vector2f(4.0f));
	DOCTEST_CHECK(vf1.Set(2.0f, 3.0f) == en::Vector2f(2.0f, 3.0f));
	en::Vector2f v1(3.0f, 7.0f);
	en::Vector2f v2(5.0f, 11.0f);
	DOCTEST_CHECK(v1 == (+v1));
	DOCTEST_CHECK(-(v1.x) == (-v1).x);
	DOCTEST_CHECK(-(v1.y) == (-v1).y);
	DOCTEST_CHECK(v1 + v2 == en::Vector2f(8.0f, 18.0f));
	DOCTEST_CHECK(v1 - v2 == en::Vector2f(-2.0f, -4.0f));
	DOCTEST_CHECK(v1 * v2 == en::Vector2f(15.0f, 77.0f));
	DOCTEST_CHECK(v1 / v2 == en::Vector2f(3.0f / 5.0f, 7.0f / 11.0f));
	DOCTEST_CHECK(v1 + 2.0f == en::Vector2f(5.0f, 9.0f));
	DOCTEST_CHECK(v1 - 2.0f == en::Vector2f(1.0f, 5.0f));
	DOCTEST_CHECK(v1 * 2.0f == en::Vector2f(6.0f, 14.0f));
	DOCTEST_CHECK(v1 / 2.0f == en::Vector2f(1.5f, 3.5f));
	DOCTEST_CHECK(1.0f - v1 == en::Vector2f(-2.0f, -6.0f));
	DOCTEST_CHECK(1.0f / v1 == en::Vector2f(1.0f / 3.0f, 1.0f / 7.0f));
	DOCTEST_CHECK(!v1.IsZero());
	DOCTEST_CHECK(en::Vector2f::Zero().IsZero());
	v1 += v2;
	v1 -= v2;
	DOCTEST_CHECK(v1 == en::Vector2f(3.0f, 7.0f));
	v1 *= v2;
	v1 /= v2;
	DOCTEST_CHECK(v1 == en::Vector2f(3.0f, 7.0f));
	v1 += 4.0f;
	v1 -= 4.0f;
	DOCTEST_CHECK(v1 == en::Vector2f(3.0f, 7.0f));
	v1 *= 4.0f;
	v1 /= 4.0f;
	DOCTEST_CHECK(v1 == en::Vector2f(3.0f, 7.0f));
	DOCTEST_CHECK(v1 < v2);
	DOCTEST_CHECK(v2 > v1);
	DOCTEST_CHECK(v1 <= v2);
	DOCTEST_CHECK(v2 >= v1);
	DOCTEST_CHECK(en::Math::Equals(v1.DotProduct(v2), 92.0f));
	DOCTEST_CHECK(en::Math::Equals(v2.DotProduct(v1), 92.0f));
	DOCTEST_CHECK(en::Math::Equals(en::Vector2f::DotProduct(v1, v2), 92.0f));
	DOCTEST_CHECK(en::Math::Equals(en::Vector2f::DotProduct(v2, v1), 92.0f));
	DOCTEST_CHECK(en::Math::Equals(v1.GetSquaredLength(), 58.0f));
	DOCTEST_CHECK(en::Math::Equals(v2.GetSquaredLength(), 146.0f));
	DOCTEST_CHECK(en::Math::Equals(v1.GetLength(), en::Math::Sqrt(58.0f)));
	DOCTEST_CHECK(en::Math::Equals(v2.GetLength(), en::Math::Sqrt(146.0f)));
	v1.SetLength(3.0f);
	v2.SetLength(5.0f);
	DOCTEST_CHECK(en::Math::Equals(v1.GetLength(), 3.0f));
	DOCTEST_CHECK(en::Math::Equals(v2.GetLength(), 5.0f));
	DOCTEST_CHECK(en::Vector2f::Equals(v1, en::Vector2f(9.0f / en::Math::Sqrt(58.0f), 21.0f / en::Math::Sqrt(58.0f))));
	DOCTEST_CHECK(en::Vector2f::Equals(v2, en::Vector2f(25.000f / en::Math::Sqrt(146.000f), 55.000f / en::Math::Sqrt(146.000f))));
	v1.Normalize();
	v2.Normalize();
	//DOCTEST_CHECK(en::Vector2f::Equals(v1, en::Vector2f(3.0f / en::Math::Sqrt(58.0f), 7.0f / en::Math::Sqrt(58.0f))));
	//DOCTEST_CHECK(en::Vector2f::Equals(v2, en::Vector2f(5.0f / en::Math::Sqrt(146.000f), 11.0f / en::Math::Sqrt(146.000f))));
	v1.SetPolarAngle(45.0f);
	DOCTEST_CHECK(en::Math::Equals(v1.x, en::Math::Sqrt(2.0f) * 0.5f));
	DOCTEST_CHECK(en::Math::Equals(v1.y, en::Math::Sqrt(2.0f) * 0.5f));
	DOCTEST_CHECK(en::Math::Equals(v1.GetPolarAngle(), 45.0f));
	v1.SetPolarAngle(0.0f);
	DOCTEST_CHECK(en::Math::Equals(v1.x, 1.0f));
	DOCTEST_CHECK(en::Math::Equals(v1.y, 0.0f));
	DOCTEST_CHECK(en::Math::Equals(v1.GetPolarAngle(), 0.0f));
	v1.Rotate(90.0f);
	DOCTEST_CHECK(en::Math::Equals(v1.x, 0.0f));
	DOCTEST_CHECK(en::Math::Equals(v1.y, 1.0f));
	DOCTEST_CHECK(en::Math::Equals(v1.GetPolarAngle(), 90.0f));
	v1.Set(-50.0f, 50.0f);
	v2.Set(50.0f, -50.0f);
	DOCTEST_CHECK(en::Vector2f::Equals(en::Vector2f::Lerp(v1, v2, 0.0f), v1));
	DOCTEST_CHECK(en::Vector2f::Equals(en::Vector2f::Lerp(v1, v2, 0.25f), en::Vector2f(-25.0f, 25.0f)));
	DOCTEST_CHECK(en::Vector2f::Equals(en::Vector2f::Lerp(v1, v2, 0.5f), en::Vector2f::Zero()));
	DOCTEST_CHECK(en::Vector2f::Equals(en::Vector2f::Lerp(v1, v2, 0.75f), en::Vector2f(25.0f, -25.0f)));
	DOCTEST_CHECK(en::Vector2f::Equals(en::Vector2f::Lerp(v1, v2, 1.0f), v2));
	v1.Set(3.0f, 7.0f);
	v2.Set(5.0f, 11.0f);
	DOCTEST_CHECK(en::Vector2f::Equals(en::Vector2f::Maximum(v1, v2), v2));
	DOCTEST_CHECK(en::Vector2f::Equals(v1.Maximize(v2), v2));
	DOCTEST_CHECK(en::Vector2f::Equals(en::Vector2f::Minimum(en::Vector2f(3.0f, 7.0f), v2), en::Vector2f(3.0f, 7.0f)));
	DOCTEST_CHECK(en::Vector2f::Equals(v2.Minimize(en::Vector2f(3.0f, 7.0f)), en::Vector2f(3.0f, 7.0f)));
}